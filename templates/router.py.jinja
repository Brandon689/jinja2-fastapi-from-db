from fastapi import APIRouter, HTTPException, Query, Depends
from typing import List, Optional
from models import {{ table.name | capitalize }}{% if not table.is_fts %}, {{ table.name | capitalize }}Create{% else %}Search, {{ table.name | capitalize }}Result{% endif %}
from database import execute_query, execute_insert, execute_update_delete{% if table.is_fts %}, execute_fts_query{% endif %}

router = APIRouter(
    prefix="/{{ table.name | lower }}",
    tags=["{{ table.name | capitalize }}"]
)

{% if not table.is_fts %}
@router.get("/", response_model=List[{{ table.name | capitalize }}])
async def get_{{ table.name | lower }}(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    sort_by: Optional[str] = None,
    order: Optional[str] = Query(None, pattern="^(asc|desc)$")
):
    query = "SELECT * FROM {{ table.name }}"
    if sort_by:
        query += f" ORDER BY {sort_by}"
        if order:
            query += f" {order.upper()}"
    query += " LIMIT ? OFFSET ?"
    return execute_query(query, (limit, skip))

@router.get("/{item_id}", response_model={{ table.name | capitalize }})
async def get_{{ table.name | lower }}_item(item_id: int):
    query = "SELECT * FROM {{ table.name }} WHERE {{ table.primary_key }} = ?"
    result = execute_query(query, (item_id,))
    if not result:
        raise HTTPException(status_code=404, detail="Item not found")
    return result[0]

@router.post("/", response_model={{ table.name | capitalize }})
async def create_{{ table.name | lower }}(item: {{ table.name | capitalize }}Create):
    columns = ", ".join(item.dict().keys())
    placeholders = ", ".join("?" * len(item.dict()))
    query = f"INSERT INTO {{ table.name }} ({columns}) VALUES ({placeholders})"
    last_id = execute_insert(query, tuple(item.dict().values()))
    return {**item.dict(), "{{ table.primary_key }}": last_id}

@router.put("/{item_id}", response_model={{ table.name | capitalize }})
async def update_{{ table.name | lower }}(item_id: int, item: {{ table.name | capitalize }}Create):
    set_clause = ", ".join(f"{k} = ?" for k in item.dict().keys())
    query = f"UPDATE {{ table.name }} SET {set_clause} WHERE {{ table.primary_key }} = ?"
    values = tuple(item.dict().values()) + (item_id,)
    affected_rows = execute_update_delete(query, values)
    if affected_rows == 0:
        raise HTTPException(status_code=404, detail="Item not found")
    return {**item.dict(), "{{ table.primary_key }}": item_id}

@router.delete("/{item_id}")
async def delete_{{ table.name | lower }}(item_id: int):
    query = "DELETE FROM {{ table.name }} WHERE {{ table.primary_key }} = ?"
    affected_rows = execute_update_delete(query, (item_id,))
    if affected_rows == 0:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"message": "Item deleted successfully"}

{% else %}
@router.get("/search", response_model=List[{{ table.name | capitalize }}Result])
async def search_{{ table.name | lower }}(
    query: str = Query(..., min_length=1),
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000)
):
    results = execute_fts_query("{{ table.name }}", query)
    return results[skip:skip+limit]
{% endif %}